import fileSystem from "fs";
import glob from "glob";
import esbuild from "esbuild";
import chalk from "chalk";

async function buildFunctionManifest(config: Config) {
  const root = __dirname.replace(/\/wrangler$/, "");
  const functionGlob = `${root}/functions/**/*.func.{ts,js}`;
  const functionManifest: { [key: string]: string } = {};
  
  await Promise.all(glob.sync(functionGlob).map(async functionPath => {
    const modulePath = functionPath.replace(`${root}/functions`, "").slice(0, -8);
    const deployPath = `/fn${modulePath.replace(/\/index/g, "")}`;
    functionManifest[deployPath] = functionPath.slice(0, -3);
  }));
  
  const generateFunctionModuleExport = (path: string, index: number) => {
    functionModuleText += `import f${index} from "${functionManifest[path]}";\n`;
    return true;
  };

  const generateFunctionManifestEntry = (path: string, index: number) => {
    functionModuleText += ` "${path}": f${index},`;
    return true;
  };
  
  let functionModuleText = "";
  Object.keys(functionManifest).every(generateFunctionModuleExport);
  functionModuleText += "export default {";
  Object.keys(functionManifest).every(generateFunctionManifestEntry);
  functionModuleText += " };";

  const functionModulePath = `${__dirname}/_manifest.ts`;
  fileSystem.writeFileSync(functionModulePath, functionModuleText);
}

async function buildWorker(config: Config) {
  await esbuild.build({
    platform: "browser",
    conditions: ["worker"],
    target: "es2020",
    format: "esm",
    bundle: true,
    minify: !config.debug,
    
    entryPoints: [`${__dirname}/_worker.ts`],
    outfile: `${__dirname}/_worker.mjs`,
    allowOverwrite: true,
  
    // `vite-plugin-ssr` uses some Node.js APIs that must be polyfilled
    // when bundling for edge functions since they are not available there.
    plugins: [(await import("@esbuild-plugins/node-modules-polyfill")).NodeModulesPolyfillPlugin()],
  
    // Defining these are required when using `esbuild`, otherwise we get runtime errors.
    // https://github.com/vuejs/core/tree/main/packages/vue#bundler-build-feature-flags
    define: { __VUE_OPTIONS_API__: "true", __VUE_PROD_DEVTOOLS__: "false" },

    // This module is generated by Cloudflare Workers Sites during deployment.
    external: ["__STATIC_CONTENT_MANIFEST"]
  });

  const stat = fileSystem.statSync(`${__dirname}/_worker.mjs`);
  console.log(`${chalk.magenta('bundle')} ${stat.size / 1000} KB`);
}

type Config = {
  secret: string | undefined,
  debug: boolean
};

(async (config: Config) => {
  await buildFunctionManifest(config);
  if (process.argv[2] !== "manifest") await buildWorker(config);
})({
  secret: process.env.FUNCTIONS_SECRET,
  debug: !!process.env.FUNCTIONS_DEBUG
});

// DEV COMMANDS:
// npx chokidar 'functions/**/*.func.{ts,js}' -c 'npx ts-node wrangler/build.ts manifest' --initial
// wrangler dev wrangler/_worker.ts --config wrangler/config.toml --site dist/client --node-compat
// vite

// PREVIEW COMMANDS:
// vite build && npx ts-node wrangler/build.ts
// wrangler dev wrangler/_worker.mjs --config wrangler/config.toml --site dist/client --no-bundle
// npx ts-node preview.ts

// DEPLOY COMMANDS:
// vite build && npx ts-node wrangler/build.ts
// wrangler publish wrangler/_worker.mjs --config wrangler/config.toml --site dist/client --name test --no-bundle
